import streamlit as st
import pandas as pd
import random

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ DnD", layout="wide")

@st.cache_data
def load_plant_data():
    df = pd.read_excel("ingredients.xlsx")
    df["–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"] = df["–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"].str.strip().str.capitalize()
    df = df[~df["–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"].isin(["–í–µ—Å–Ω–∞", "–õ–µ—Ç–æ", "–û—Å–µ–Ω—å", "–ó–∏–º–∞"])]
    df["–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"] = df["–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"].replace({"–ª–µ—Å": "–õ–µ—Å"})
    return df

@st.cache_data
def load_animal_data():
    return pd.read_excel("animal_ingredients.xlsx")

df_plants = load_plant_data()
df_animals = load_animal_data()

rarity_weights = {
    "–û–±—ã—á–Ω—ã–π": 50,
    "–ù–µ–æ–±—ã—á–Ω—ã–π": 30,
    "–†–µ–¥–∫–∏–π": 15,
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": 5
}

def weighted_sample(df):
    weighted_list = []
    for _, row in df.iterrows():
        weight = rarity_weights.get(row["–†–µ–¥–∫–æ—Å—Ç—å"], 1)
        weighted_list.extend([row.name] * weight)
    if not weighted_list:
        return None
    return df.loc[random.choice(weighted_list)]

def show_ingredient(selected, is_plant=True):
    if selected is None:
        return
    rarity = selected["–†–µ–¥–∫–æ—Å—Ç—å"]
    name = selected["–ù–∞–∑–≤–∞–Ω–∏–µ"]
    description = selected["–û–ø–∏—Å–∞–Ω–∏–µ"] if is_plant else selected.get("–û–ø–∏—Å–∞–Ω–∏–µ", selected.get("–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç", ""))
    dc_value = selected["DC —Å–±–æ—Ä–∞"]

    text_color = {
        "–û–±—ã—á–Ω—ã–π": "#e4e5e3",
        "–ù–µ–æ–±—ã—á–Ω—ã–π": "#b3e9b8",
        "–†–µ–¥–∫–∏–π": "#f0be7f",
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "#f7ed2d"
    }.get(rarity, "#ffffff")

    circle_html = f"<span style='display:inline-block; width:14px; height:14px; border-radius:50%; background:{text_color}; margin-right:8px;'></span>"

    st.markdown(f"""
        <div style='
            background: linear-gradient(135deg, #2f2f2f, #1c1c1c);
            padding: 18px 22px;
            border-left: 6px solid {text_color};
            border-radius: 12px;
            margin-bottom: 10px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: space-between;
            align-items: center;
        '>
            <div>
                <div style='color: {text_color}; font-size: 22px; font-weight: bold; margin-bottom: 6px'>
                    {circle_html}{name} ({rarity})
                </div>
                <div style='color: #eeeeee; font-size: 16px; font-style: italic'>
                    –û–ø–∏—Å–∞–Ω–∏–µ: {description}
                </div>
            </div>
            <div style='color: {text_color}; font-size: 22px; font-weight: bold; text-align: right;'>
                DC: {dc_value}
            </div>
        </div>
    """, unsafe_allow_html=True)

    with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ"):
        if is_plant:
            st.write(f"**–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç:** {selected['–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç']}")
            st.write(f"**–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:** {selected['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}")
            st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {selected['–°—Ç–æ–∏–º–æ—Å—Ç—å']} –º–∞–ª—ã—Ö –ø–µ—á–∞—Ç–µ–π")
            st.write(f"**–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è:** {selected['–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è']}")
            st.write(f"**–¢–∏–ø:** {selected['–¢–∏–ø']}")
            st.write(f"**–§–æ—Ä–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:** {selected['–§–æ—Ä–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è']}")
        else:
            st.write(f"**–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:** {selected['–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏']}")
            st.write(f"**–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:** {selected['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}")
            st.write(f"**–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:** {selected['–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è']}")
            st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏:** {selected['–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (–∑–º)']} –∑–º")

page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", ["üåø –¢—Ä–∞–≤—ã", "ü¶¥ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "üß™ –°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ"])

# üåø –¢—Ä–∞–≤—ã
if page == "üåø –¢—Ä–∞–≤—ã":
    st.header("üåø –¢—Ä–∞–≤—ã")
    rarity_filter = st.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏", sorted(df_plants["–†–µ–¥–∫–æ—Å—Ç—å"].unique()), default=sorted(df_plants["–†–µ–¥–∫–æ—Å—Ç—å"].unique()))
    habitats = sorted(df_plants["–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"].dropna().unique())
    habitat_filter = st.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏", habitats, default=habitats)

    filtered = df_plants.copy()
    if rarity_filter or habitat_filter:
        filtered = filtered[filtered["–†–µ–¥–∫–æ—Å—Ç—å"].isin(rarity_filter) & filtered["–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"].isin(habitat_filter)]

    if "plant_history" not in st.session_state:
        st.session_state["plant_history"] = []
        st.session_state["plant_index"] = -1

    col1, col2, col3 = st.columns([2, 0.5, 0.5])
    with col1:
        if st.button("üé≤ –ó–∞—Ä–æ–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"):
            rolled = [weighted_sample(filtered) for _ in range(3)]
            st.session_state["plant_history"].append(rolled)
            st.session_state["plant_index"] = len(st.session_state["plant_history"]) - 1
    with col2:
        if st.button("‚óÄ", key="plant_prev") and st.session_state["plant_index"] > 0:
            st.session_state["plant_index"] -= 1
    with col3:
        if st.button("‚ñ∂", key="plant_next") and st.session_state["plant_index"] < len(st.session_state["plant_history"]) - 1:
            st.session_state["plant_index"] += 1

    if st.session_state["plant_index"] >= 0:
        for plant in st.session_state["plant_history"][st.session_state["plant_index"]]:
            show_ingredient(plant, is_plant=True)

# ü¶¥ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
elif page == "ü¶¥ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã":
    st.header("ü¶¥ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã")
    rarity_filter = st.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏", sorted(df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].unique()), default=sorted(df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].unique()))
    filtered = df_animals.copy()
    if rarity_filter:
        filtered = filtered[filtered["–†–µ–¥–∫–æ—Å—Ç—å"].isin(rarity_filter)]

    if "animal_history" not in st.session_state:
        st.session_state["animal_history"] = []
        st.session_state["animal_index"] = -1

    col1, col2, col3 = st.columns([2, 0.5, 0.5])
    with col1:
        if st.button("üé≤ –ó–∞—Ä–æ–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", key="roll_animal"):
            rolled = [weighted_sample(filtered) for _ in range(3)]
            st.session_state["animal_history"].append(rolled)
            st.session_state["animal_index"] = len(st.session_state["animal_history"]) - 1
    with col2:
        if st.button("‚óÄ", key="animal_prev") and st.session_state["animal_index"] > 0:
            st.session_state["animal_index"] -= 1
    with col3:
        if st.button("‚ñ∂", key="animal_next") and st.session_state["animal_index"] < len(st.session_state["animal_history"]) - 1:
            st.session_state["animal_index"] += 1

    if st.session_state["animal_index"] >= 0:
        for animal in st.session_state["animal_history"][st.session_state["animal_index"]]:
            show_ingredient(animal, is_plant=False)

# üß™ –°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ
elif page == "üß™ –°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ":
    st.header("üß™ –°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ")

    if "potion_history" not in st.session_state:
        st.session_state["potion_history"] = []
        st.session_state["potion_index"] = -1
        st.session_state["used_combinations"] = set()

    selected_rarities = st.multiselect(
        "–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏",
        ["–û–±—ã—á–Ω—ã–π", "–ù–µ–æ–±—ã—á–Ω—ã–π", "–†–µ–¥–∫–∏–π", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"],
        default=["–û–±—ã—á–Ω—ã–π", "–ù–µ–æ–±—ã—á–Ω—ã–π", "–†–µ–¥–∫–∏–π", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"]
    )

    def genitive(name):
        return name[:-1] + "—ã" if name.endswith("–∞") else name[:-1] + "–∏" if name.endswith("—è") else name

    def generate_name(p, a):
        return random.choice([
            f"–≠–ª–∏–∫—Å–∏—Ä {genitive(p)}",
            f"–ù–∞—Å—Ç–æ–π {genitive(a)}",
            f"–ó–µ–ª—å–µ {a.split()[0]} –∏ {p.split()[0]}",
            f"–§–ª–∞–∫–æ–Ω {a.split()[0]}",
            f"–≠—Å—Å–µ–Ω—Ü–∏—è {p.split()[0]}",
            f"–û—Ç–≤–∞—Ä {a.split()[0]} –∏ {p.split()[0]}",
            f"–ó–µ–ª—å–µ –∏–∑ {genitive(p)} –∏ {genitive(a)}"
        ])

    col1, col2, col3 = st.columns([2, 0.5, 0.5])
    with col1:
        if st.button("üé≤ –°–æ–∑–¥–∞—Ç—å –∑–µ–ª—å–µ"):
            for _ in range(100):
                plant = df_plants[df_plants["–†–µ–¥–∫–æ—Å—Ç—å"].isin(selected_rarities)].sample(1).iloc[0]
                animal = df_animals[df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].isin(selected_rarities)].sample(1).iloc[0]
                key = f"{plant['–ù–∞–∑–≤–∞–Ω–∏–µ']}|{animal['–ù–∞–∑–≤–∞–Ω–∏–µ']}"
                if key not in st.session_state["used_combinations"]:
                    st.session_state["used_combinations"].add(key)
                    break
            else:
                st.warning("–í—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã!")
                st.stop()

            st.session_state["potion_history"].append((plant, animal))
            st.session_state["potion_index"] = len(st.session_state["potion_history"]) - 1
    with col2:
        if st.button("‚óÄ", key="potion_prev") and st.session_state["potion_index"] > 0:
            st.session_state["potion_index"] -= 1
    with col3:
        if st.button("‚ñ∂", key="potion_next") and st.session_state["potion_index"] < len(st.session_state["potion_history"]) - 1:
            st.session_state["potion_index"] += 1

    if st.session_state["potion_index"] >= 0:
        plant, animal = st.session_state["potion_history"][st.session_state["potion_index"]]
        rarity = random.choice([plant["–†–µ–¥–∫–æ—Å—Ç—å"], animal["–†–µ–¥–∫–æ—Å—Ç—å"]])
        name = generate_name(plant["–ù–∞–∑–≤–∞–Ω–∏–µ"], animal["–ù–∞–∑–≤–∞–Ω–∏–µ"])
        effect = f"{plant['–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç']} + {animal['–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏']}"
        side = f"{plant['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}, {animal['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}"
        dc = max(plant["DC —Å–±–æ—Ä–∞"], animal["DC —Å–±–æ—Ä–∞"])
        comp = f"üåø {plant['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {plant['–û–ø–∏—Å–∞–Ω–∏–µ']}<br>ü¶¥ {animal['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {animal.get('–û–ø–∏—Å–∞–Ω–∏–µ', animal.get('–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç', ''))}"

        color = {
            "–û–±—ã—á–Ω—ã–π": "#e4e5e3",
            "–ù–µ–æ–±—ã—á–Ω—ã–π": "#b3e9b8",
            "–†–µ–¥–∫–∏–π": "#f0be7f",
            "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "#f7ed2d"
        }.get(rarity, "#ffffff")

        st.markdown(f"""
        <div style='background-color:#1e1e1e; padding:20px; border-radius:10px; border-left:6px solid {color}; margin-top:20px; box-shadow:2px 2px 8px rgba(0,0,0,0.4);'>
            <div style='display: flex; justify-content: space-between; align-items: center;'>
                <h3 style='color:{color};'>üß™ {name} ({rarity})</h3>
                <div style='color:{color}; font-weight:bold; font-size:20px;'>DC: {dc}</div>
            </div>
            <p><strong>–≠—Ñ—Ñ–µ–∫—Ç:</strong> {effect}</p>
            <p><strong>–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:</strong> {side}</p>
            <p><strong>–°–æ—Å—Ç–∞–≤:</strong><br>{comp}</p>
        </div>
        """, unsafe_allow_html=True)
