import streamlit as st
import pandas as pd
import random

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ DnD", layout="wide")

@st.cache_data
def load_plant_data():
    return pd.read_excel("ingredients.xlsx")

@st.cache_data
def load_animal_data():
    return pd.read_excel("animal_ingredients.xlsx")

df_plants = load_plant_data()
df_animals = load_animal_data()

rarity_weights = {
    "–û–±—ã—á–Ω—ã–π": 50,
    "–ù–µ–æ–±—ã—á–Ω—ã–π": 30,
    "–†–µ–¥–∫–∏–π": 15,
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": 5
}

def weighted_sample(df):
    weighted_list = []
    for _, row in df.iterrows():
        weight = rarity_weights.get(row["–†–µ–¥–∫–æ—Å—Ç—å"], 1)
        weighted_list.extend([row.name] * weight)
    if not weighted_list:
        return None
    return df.loc[random.choice(weighted_list)]

def roll_ingredients(df, num):
    return [weighted_sample(df) for _ in range(num)]

def show_ingredient(selected, is_plant=True):
    rarity = selected["–†–µ–¥–∫–æ—Å—Ç—å"]
    name = selected["–ù–∞–∑–≤–∞–Ω–∏–µ"]
    description = selected["–û–ø–∏—Å–∞–Ω–∏–µ"] if is_plant else selected["–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç"]
    dc_value = selected["DC —Å–±–æ—Ä–∞"]

    text_color = {
        "–û–±—ã—á–Ω—ã–π": "#e4e5e3",
        "–ù–µ–æ–±—ã—á–Ω—ã–π": "#b3e9b8",
        "–†–µ–¥–∫–∏–π": "#f0be7f",
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "#f7ed2d"
    }.get(rarity, "#ffffff")

    bg_color = {
        "–û–±—ã—á–Ω—ã–π": "#2f2f2f",
        "–ù–µ–æ–±—ã—á–Ω—ã–π": "#1f3f2f",
        "–†–µ–¥–∫–∏–π": "#3f2f1f",
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "#3f3f0f"
    }.get(rarity, "#2f2f2f")

    circle_html = f"<span style='display:inline-block; width:14px; height:14px; border-radius:50%; background:{text_color}; margin-right:8px;'></span>"

    st.markdown(f"""
        <div style='
            background: linear-gradient(135deg, {bg_color}, #1c1c1c);
            padding: 18px 22px;
            border-left: 6px solid {text_color};
            border-radius: 12px;
            margin-bottom: 10px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: space-between;
            align-items: center;
        '>
            <div>
                <div style='color: {text_color}; font-size: 22px; font-weight: bold; margin-bottom: 6px'>
                    {circle_html}{name} ({rarity})
                </div>
                <div style='color: #eeeeee; font-size: 16px; font-style: italic'>
                    –û–ø–∏—Å–∞–Ω–∏–µ: {description}
                </div>
            </div>
            <div style='color: {text_color}; font-size: 22px; font-weight: bold; text-align: right;'>
                DC: {dc_value}
            </div>
        </div>
    """, unsafe_allow_html=True)

    with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ"):
        if is_plant:
            st.write(f"**–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç:** {selected['–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç']}")
            st.write(f"**–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:** {selected['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}")
            st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {selected['–°—Ç–æ–∏–º–æ—Å—Ç—å']} –º–∞–ª—ã—Ö –ø–µ—á–∞—Ç–µ–π")
            st.write(f"**–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è:** {selected['–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è']}")
            st.write(f"**–¢–∏–ø:** {selected['–¢–∏–ø']}")
            st.write(f"**–§–æ—Ä–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:** {selected['–§–æ—Ä–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è']}")
        else:
            st.write(f"**–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:** {selected['–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏']}")
            st.write(f"**–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:** {selected['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}")
            st.write(f"**–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:** {selected['–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è']}")
            st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏:** {selected['–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (–∑–º)']} –∑–º")


tab1, tab2 = st.tabs(["üåø –¢—Ä–∞–≤—ã", "ü¶¥ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"])

with tab1:
    col_left, col_center, col_right = st.columns([1, 2.5, 1])
    with col_center:
        st.header("üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ‚Äî –¢—Ä–∞–≤—ã")
        col1, col2 = st.columns(2)
        with col1:
            selected_rarity = st.multiselect("üìä –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏", df_plants["–†–µ–¥–∫–æ—Å—Ç—å"].unique(), default=df_plants["–†–µ–¥–∫–æ—Å—Ç—å"].unique(), key="rarity_plant")
        with col2:
            all_envs = sorted(set(", ".join(df_plants["–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"].dropna()).split(", ")))
            selected_env = st.multiselect("üåç –°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è", all_envs, default=None, key="env_plant")
        filtered_df = df_plants[df_plants["–†–µ–¥–∫–æ—Å—Ç—å"].isin(selected_rarity)]
        if selected_env:
            filtered_df = filtered_df[filtered_df["–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"].str.contains("|".join(selected_env), na=False)]
        num = st.slider("üî¢ –°–∫–æ–ª—å–∫–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∑–∞—Ä–æ–ª–∏—Ç—å?", 1, 10, 3, key="count_plant")
        if "plant_history" not in st.session_state:
            st.session_state["plant_history"] = []
            st.session_state["plant_index"] = -1
        col_roll, col_back, col_forward = st.columns([2, 0.5, 0.5])
        with col_roll:
            roll_clicked = st.button("üé≤ –ó–∞—Ä–æ–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–¢—Ä–∞–≤—ã)", key="roll_plant_main")
            if roll_clicked:
                if filtered_df.empty:
                    st.warning("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
                else:
                    roll = roll_ingredients(filtered_df, num)
                    st.session_state["plant_history"].append(roll)
                    st.session_state["plant_index"] = len(st.session_state["plant_history"]) - 1
        with col_back:
            if st.button("‚óÄ –ù–∞–∑–∞–¥", key="plant_prev"):
                if st.session_state["plant_index"] > 0:
                    st.session_state["plant_index"] -= 1
                else:
                    st.info("–≠—Ç–æ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        with col_forward:
            if st.button("–í–ø–µ—Ä—ë–¥ ‚ñ∂", key="plant_next"):
                if st.session_state["plant_index"] < len(st.session_state["plant_history"]) - 1:
                    st.session_state["plant_index"] += 1
                else:
                    st.info("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        st.markdown("---")
        if st.session_state["plant_index"] >= 0:
            for item in st.session_state["plant_history"][st.session_state["plant_index"]]:
                show_ingredient(item, is_plant=True)

with tab2:
    col_left, col_center, col_right = st.columns([1, 2.5, 1])
    with col_center:
        st.header("üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ‚Äî –ñ–∏–≤–æ—Ç–Ω—ã–µ")
        selected_rarity = st.multiselect("üìä –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏", df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].unique(), default=df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].unique(), key="rarity_animal")
        filtered_df = df_animals[df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].isin(selected_rarity)]
        num = st.slider("üî¢ –°–∫–æ–ª—å–∫–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∑–∞—Ä–æ–ª–∏—Ç—å?", 1, 10, 3, key="count_animal")
        if "animal_history" not in st.session_state:
            st.session_state["animal_history"] = []
            st.session_state["animal_index"] = -1
        col_roll, col_back, col_forward = st.columns([2, 0.5, 0.5])
        with col_roll:
            if st.button("üé≤ –ó–∞—Ä–æ–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–ñ–∏–≤–æ—Ç–Ω—ã–µ)", key="roll_animal"):
                if filtered_df.empty:
                    st.warning("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
                else:
                    roll = roll_ingredients(filtered_df, num)
                    st.session_state["animal_history"].append(roll)
                    st.session_state["animal_index"] = len(st.session_state["animal_history"]) - 1
        with col_back:
            if st.button("‚óÄ –ù–∞–∑–∞–¥", key="animal_prev"):
                if st.session_state["animal_index"] > 0:
                    st.session_state["animal_index"] -= 1
                else:
                    st.info("–≠—Ç–æ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        with col_forward:
            if st.button("–í–ø–µ—Ä—ë–¥ ‚ñ∂", key="animal_next"):
                if st.session_state["animal_index"] < len(st.session_state["animal_history"]) - 1:
                    st.session_state["animal_index"] += 1
                else:
                    st.info("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        st.markdown("---")
        if st.session_state["animal_index"] >= 0:
            for item in st.session_state["animal_history"][st.session_state["animal_index"]]:
                show_ingredient(item, is_plant=False)
