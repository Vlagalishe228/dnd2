import streamlit as st
import pandas as pd
import random

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ DnD", layout="wide")

@st.cache_data
def load_plant_data():
    return pd.read_excel("ingredients.xlsx")

@st.cache_data
def load_animal_data():
    return pd.read_excel("animal_ingredients.xlsx")

df_plants = load_plant_data()
df_animals = load_animal_data()

rarity_weights = {
    "–û–±—ã—á–Ω—ã–π": 50,
    "–ù–µ–æ–±—ã—á–Ω—ã–π": 30,
    "–†–µ–¥–∫–∏–π": 15,
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": 5
}

def weighted_sample(df):
    weighted_list = []
    for _, row in df.iterrows():
        weight = rarity_weights.get(row["–†–µ–¥–∫–æ—Å—Ç—å"], 1)
        weighted_list.extend([row.name] * weight)
    if not weighted_list:
        return None
    return df.loc[random.choice(weighted_list)]

def roll_ingredients(df, num):
    return [weighted_sample(df) for _ in range(num)]

def show_ingredient(selected, is_plant=True):
    rarity = selected["–†–µ–¥–∫–æ—Å—Ç—å"]
    name = selected["–ù–∞–∑–≤–∞–Ω–∏–µ"]
    description = selected["–û–ø–∏—Å–∞–Ω–∏–µ"] if is_plant else selected["–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç"]
    dc_value = selected["DC —Å–±–æ—Ä–∞"]

    text_color = {
        "–û–±—ã—á–Ω—ã–π": "#e4e5e3",
        "–ù–µ–æ–±—ã—á–Ω—ã–π": "#b3e9b8",
        "–†–µ–¥–∫–∏–π": "#f0be7f",
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "#f7ed2d"
    }.get(rarity, "#ffffff")

    bg_color = {
        "–û–±—ã—á–Ω—ã–π": "#2f2f2f",
        "–ù–µ–æ–±—ã—á–Ω—ã–π": "#1f3f2f",
        "–†–µ–¥–∫–∏–π": "#3f2f1f",
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "#3f3f0f"
    }.get(rarity, "#2f2f2f")

    circle_html = f"<span style='display:inline-block; width:14px; height:14px; border-radius:50%; background:{text_color}; margin-right:8px;'></span>"

    st.markdown(f"""
        <div style='
            background: linear-gradient(135deg, {bg_color}, #1c1c1c);
            padding: 18px 22px;
            border-left: 6px solid {text_color};
            border-radius: 12px;
            margin-bottom: 10px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: space-between;
            align-items: center;
        '>
            <div>
                <div style='color: {text_color}; font-size: 22px; font-weight: bold; margin-bottom: 6px'>
                    {circle_html}{name} ({rarity})
                </div>
                <div style='color: #eeeeee; font-size: 16px; font-style: italic'>
                    –û–ø–∏—Å–∞–Ω–∏–µ: {description}
                </div>
            </div>
            <div style='color: {text_color}; font-size: 22px; font-weight: bold; text-align: right;'>
                DC: {dc_value}
            </div>
        </div>
    """, unsafe_allow_html=True)

    with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ"):
        if is_plant:
            st.write(f"**–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç:** {selected['–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç']}")
            st.write(f"**–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:** {selected['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}")
            st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {selected['–°—Ç–æ–∏–º–æ—Å—Ç—å']} –º–∞–ª—ã—Ö –ø–µ—á–∞—Ç–µ–π")
            st.write(f"**–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è:** {selected['–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è']}")
            st.write(f"**–¢–∏–ø:** {selected['–¢–∏–ø']}")
            st.write(f"**–§–æ—Ä–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:** {selected['–§–æ—Ä–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è']}")
        
elif page == "ü¶¥ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã":
    st.write(f"**–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:** {selected['–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏']}")
    st.write(f"**–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:** {selected['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}")
    st.write(f"**–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:** {selected['–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è']}")
    st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏:** {selected['–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (–∑–º)']} –∑–º")



# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ


page = st.sidebar.radio("üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", ["üåø –¢—Ä–∞–≤—ã", "ü¶¥ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "üß™ –°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ"])

if page == "üåø –¢—Ä–∞–≤—ã":
    # –∫–æ–¥ –¥–ª—è —Ç—Ä–∞–≤ (–±—É–¥–µ—Ç –Ω–∏–∂–µ –≤ –∫–æ–¥–µ)

elif page == "ü¶¥ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã":
    # –∫–æ–¥ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–±—É–¥–µ—Ç –Ω–∏–∂–µ –≤ –∫–æ–¥–µ)

elif page == "üß™ –°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ":
    # –∫–æ–¥ –¥–ª—è –∑–µ–ª—å—è (–±—É–¥–µ—Ç –Ω–∏–∂–µ –≤ –∫–æ–¥–µ)
elif page == "üß™ –°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ":
    st.header("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ")

    if "used_combinations" not in st.session_state:
        st.session_state["used_combinations"] = set()

    def genitive_form(name):
        name = name.strip()
        if name.endswith("–∞"):
            return name[:-1] + "—ã"
        elif name.endswith("—è"):
            return name[:-1] + "–∏"
        return name

    def extract_core(name):
        return name.split()[0]

    def generate_fantasy_name(plant, animal):
        import random
        templates = [
            "–≠–ª–∏–∫—Å–∏—Ä {plant_gen}",
            "–ù–∞—Å—Ç–æ–π {animal_gen}",
            "–ó–µ–ª—å–µ {animal_core} –∏ {plant_core}",
            "–§–ª–∞–∫–æ–Ω {animal_core}",
            "–≠—Å—Å–µ–Ω—Ü–∏—è {plant_core}",
            "–û—Ç–≤–∞—Ä {animal_core} –∏ {plant_core}",
            "–ó–µ–ª—å–µ –∏–∑ {plant_gen} –∏ {animal_gen}"
        ]
        plant_gen = genitive_form(plant)
        animal_gen = genitive_form(animal)
        plant_core = extract_core(plant)
        animal_core = extract_core(animal)
        template = random.choice(templates)
        return template.format(
            plant_gen=plant_gen,
            animal_gen=animal_gen,
            plant_core=plant_core,
            animal_core=animal_core
        )

    if st.button("–°–æ–∑–¥–∞—Ç—å –∑–µ–ª—å–µ"):
        import random
        attempts = 0
        while attempts < 100:
            plant = df_plants.sample(1).iloc[0]
            animal = df_animals.sample(1).iloc[0]
            combo_key = f"{plant['–ù–∞–∑–≤–∞–Ω–∏–µ']}|{animal['–ù–∞–∑–≤–∞–Ω–∏–µ']}"
            if combo_key not in st.session_state["used_combinations"]:
                st.session_state["used_combinations"].add(combo_key)
                break
            attempts += 1
            st.warning("–í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
            st.stop()

        rarity = random.choice([plant["–†–µ–¥–∫–æ—Å—Ç—å"], animal["–†–µ–¥–∫–æ—Å—Ç—å"]])
        potion_name = generate_fantasy_name(plant['–ù–∞–∑–≤–∞–Ω–∏–µ'], animal['–ù–∞–∑–≤–∞–Ω–∏–µ'])

        effect = f"{plant['–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç']} + {animal['–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏']}"
        side_effects = f"{plant['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}, {animal['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}"
        dc_text = f"DC: {max(plant['DC —Å–±–æ—Ä–∞'], animal['DC —Å–±–æ—Ä–∞'])}"
        composition = f"üåø {plant['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {plant['–û–ø–∏—Å–∞–Ω–∏–µ']}\nü¶¥ {animal['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {animal.get('–û–ø–∏—Å–∞–Ω–∏–µ', animal.get('–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç', ''))}"

        color_map = {
            "–û–±—ã—á–Ω—ã–π": "#e4e5e3",
            "–ù–µ–æ–±—ã—á–Ω—ã–π": "#b3e9b8",
            "–†–µ–¥–∫–∏–π": "#f0be7f",
            "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "#f7ed2d"
        }
        color = color_map.get(rarity, "#cccccc")

        st.markdown(f"""
        <div style='
            background-color: #1e1e1e;
            padding: 20px;
            border-radius: 10px;
            border-left: 6px solid {color};
            margin-top: 20px;
            box-shadow: 2px 2px 8px rgba(0,0,0,0.4);
        '>
            <div style='display: flex; justify-content: space-between; align-items: center;'>
                <h3 style='color: {color}; margin-bottom: 10px'>üß™ {potion_name} ({rarity})</h3>
                <div style='color: {color}; font-weight: bold; font-size: 20px'>{dc_text}</div>
            </div>
            <p><strong>–≠—Ñ—Ñ–µ–∫—Ç:</strong> {effect}</p>
            <p><strong>–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:</strong> {side_effects}</p>
            <p><strong>–°–æ—Å—Ç–∞–≤:</strong><br>{composition.replace(chr(10), "<br>")}</p>
        </div>
        """, unsafe_allow_html=True)
