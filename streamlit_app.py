import streamlit as st
import pandas as pd
import random

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ DnD", layout="wide")

@st.cache_data
def load_plant_data():
    return pd.read_excel("ingredients.xlsx")

@st.cache_data
def load_animal_data():
    return pd.read_excel("animal_ingredients.xlsx")

df_plants = load_plant_data()
df_animals = load_animal_data()

rarity_weights = {
    "–û–±—ã—á–Ω—ã–π": 50,
    "–ù–µ–æ–±—ã—á–Ω—ã–π": 30,
    "–†–µ–¥–∫–∏–π": 15,
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": 5
}

def weighted_sample(df):
    weighted_list = []
    for _, row in df.iterrows():
        weight = rarity_weights.get(row["–†–µ–¥–∫–æ—Å—Ç—å"], 1)
        weighted_list.extend([row.name] * weight)
    if not weighted_list:
        return None
    return df.loc[random.choice(weighted_list)]

def roll_ingredients(df, num):
    results = []
    for _ in range(num):
        selected = weighted_sample(df)
        if selected is not None:
            results.append(selected)
    return results

# === –í–∫–ª–∞–¥–∫–∏ ===
tab1, tab2 = st.tabs(["üåø –¢—Ä–∞–≤—ã", "ü¶¥ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"])

# === –¢–†–ê–í–´ ===
with tab1:
    st.header("üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ‚Äî –¢—Ä–∞–≤—ã")

    col1, col2 = st.columns(2)
    with col1:
        selected_rarity = st.multiselect(
            "üìä –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏",
            df_plants["–†–µ–¥–∫–æ—Å—Ç—å"].unique(),
            default=df_plants["–†–µ–¥–∫–æ—Å—Ç—å"].unique(),
            key="rarity_plant"
        )
    with col2:
        all_envs = sorted(set(", ".join(df_plants["–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"].dropna()).split(", ")))
        selected_env = st.multiselect(
            "üåç –°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è",
            all_envs,
            default=None,
            key="env_plant"
        )

    filtered_df = df_plants[df_plants["–†–µ–¥–∫–æ—Å—Ç—å"].isin(selected_rarity)]
    if selected_env:
        filtered_df = filtered_df[filtered_df["–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è"].str.contains("|".join(selected_env), na=False)]

    num = st.slider("üî¢ –°–∫–æ–ª—å–∫–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∑–∞—Ä–æ–ª–∏—Ç—å?", 1, 10, 3, key="count_plant")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("üé≤ –ó–∞—Ä–æ–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–¢—Ä–∞–≤—ã)", key="roll_plant"):
            if filtered_df.empty:
                st.warning("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
            else:
                rolled = roll_ingredients(filtered_df, num)
                st.session_state["last_plant_result"] = rolled

                for selected in rolled:
                    icon = {
                        "–û–±—ã—á–Ω—ã–π": "‚ö™",
                        "–ù–µ–æ–±—ã—á–Ω—ã–π": "üü¢",
                        "–†–µ–¥–∫–∏–π": "üîµ",
                        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "üü£"
                    }.get(selected["–†–µ–¥–∫–æ—Å—Ç—å"], "‚ùì")

                    with st.expander(f"{icon} {selected['–ù–∞–∑–≤–∞–Ω–∏–µ']} ({selected['–†–µ–¥–∫–æ—Å—Ç—å']})"):
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {selected['–û–ø–∏—Å–∞–Ω–∏–µ']}")
                        st.write(f"**–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç:** {selected['–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç']}")
                        st.write(f"**–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:** {selected['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}")
                        st.write(f"**DC —Å–±–æ—Ä–∞:** {selected['DC —Å–±–æ—Ä–∞']}")
                        st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {selected['–°—Ç–æ–∏–º–æ—Å—Ç—å']} –º–∞–ª—ã—Ö –ø–µ—á–∞—Ç–µ–π")
                        st.write(f"**–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è:** {selected['–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è']}")
                        st.write(f"**–¢–∏–ø:** {selected['–¢–∏–ø']}")
                        st.write(f"**–§–æ—Ä–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:** {selected['–§–æ—Ä–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è']}")

    with col2:
        if st.button("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¢—Ä–∞–≤—ã)", key="prev_plant"):
            if "last_plant_result" not in st.session_state:
                st.info("–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞—Ä–æ–ª–µ–Ω–æ.")
            else:
                for selected in st.session_state["last_plant_result"]:
                    icon = {
                        "–û–±—ã—á–Ω—ã–π": "‚ö™",
                        "–ù–µ–æ–±—ã—á–Ω—ã–π": "üü¢",
                        "–†–µ–¥–∫–∏–π": "üîµ",
                        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "üü£"
                    }.get(selected["–†–µ–¥–∫–æ—Å—Ç—å"], "‚ùì")

                    with st.expander(f"{icon} {selected['–ù–∞–∑–≤–∞–Ω–∏–µ']} ({selected['–†–µ–¥–∫–æ—Å—Ç—å']})"):
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {selected['–û–ø–∏—Å–∞–Ω–∏–µ']}")
                        st.write(f"**–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç:** {selected['–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç']}")
                        st.write(f"**–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:** {selected['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}")
                        st.write(f"**DC —Å–±–æ—Ä–∞:** {selected['DC —Å–±–æ—Ä–∞']}")
                        st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {selected['–°—Ç–æ–∏–º–æ—Å—Ç—å']} –º–∞–ª—ã—Ö –ø–µ—á–∞—Ç–µ–π")
                        st.write(f"**–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è:** {selected['–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è']}")
                        st.write(f"**–¢–∏–ø:** {selected['–¢–∏–ø']}")
                        st.write(f"**–§–æ—Ä–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:** {selected['–§–æ—Ä–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è']}")

# === –ñ–ò–í–û–¢–ù–´–ï –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´ ===
with tab2:
    st.header("üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ‚Äî –ñ–∏–≤–æ—Ç–Ω—ã–µ")

    selected_rarity = st.multiselect(
        "üìä –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏",
        df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].unique(),
        default=df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].unique(),
        key="rarity_animal"
    )

    filtered_df = df_animals[df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].isin(selected_rarity)]
    num = st.slider("üî¢ –°–∫–æ–ª—å–∫–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∑–∞—Ä–æ–ª–∏—Ç—å?", 1, 10, 3, key="count_animal")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("üé≤ –ó–∞—Ä–æ–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–ñ–∏–≤–æ—Ç–Ω—ã–µ)", key="roll_animal"):
            if filtered_df.empty:
                st.warning("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
            else:
                rolled = roll_ingredients(filtered_df, num)
                st.session_state["last_animal_result"] = rolled

                for selected in rolled:
                    icon = {
                        "–û–±—ã—á–Ω—ã–π": "‚ö™",
                        "–ù–µ–æ–±—ã—á–Ω—ã–π": "üü¢",
                        "–†–µ–¥–∫–∏–π": "üîµ",
                        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "üü£"
                    }.get(selected["–†–µ–¥–∫–æ—Å—Ç—å"], "‚ùì")

                    with st.expander(f"{icon} {selected['–ù–∞–∑–≤–∞–Ω–∏–µ']} ({selected['–†–µ–¥–∫–æ—Å—Ç—å']})"):
                        st.write(f"**–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç:** {selected['–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç']}")
                        st.write(f"**–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:** {selected['–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏']}")
                        st.write(f"**–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:** {selected['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}")
                        st.write(f"**DC —Å–±–æ—Ä–∞:** {selected['DC —Å–±–æ—Ä–∞']}")
                        st.write(f"**–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:** {selected['–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è']}")
                        st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏:** {selected['–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (–∑–º)']} –∑–º")

    with col2:
        if st.button("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ñ–∏–≤–æ—Ç–Ω—ã–µ)", key="prev_animal"):
            if "last_animal_result" not in st.session_state:
                st.info("–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞—Ä–æ–ª–µ–Ω–æ.")
            else:
                for selected in st.session_state["last_animal_result"]:
                    icon = {
                        "–û–±—ã—á–Ω—ã–π": "‚ö™",
                        "–ù–µ–æ–±—ã—á–Ω—ã–π": "üü¢",
                        "–†–µ–¥–∫–∏–π": "üîµ",
                        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "üü£"
                    }.get(selected["–†–µ–¥–∫–æ—Å—Ç—å"], "‚ùì")

                    with st.expander(f"{icon} {selected['–ù–∞–∑–≤–∞–Ω–∏–µ']} ({selected['–†–µ–¥–∫–æ—Å—Ç—å']})"):
                        st.write(f"**–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç:** {selected['–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç']}")
                        st.write(f"**–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:** {selected['–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏']}")
                        st.write(f"**–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:** {selected['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}")
                        st.write(f"**DC —Å–±–æ—Ä–∞:** {selected['DC —Å–±–æ—Ä–∞']}")
                        st.write(f"**–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:** {selected['–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è']}")
                        st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏:** {selected['–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (–∑–º)']} –∑–º")
