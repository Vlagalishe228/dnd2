# ==========================================
# ü¶¥ –ñ–ò–í–û–¢–ù–´–ï –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´
# ==========================================
elif page == "ü¶¥ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã":
    col_left, col_center, col_right = st.columns([1, 2.5, 1])
    with col_center:
        st.header("üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ‚Äî –ñ–∏–≤–æ—Ç–Ω—ã–µ")
        selected_rarity = st.multiselect("üìä –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏", df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].unique(), default=df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].unique(), key="rarity_animal")
        filtered_df = df_animals[df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].isin(selected_rarity)]
        num = st.slider("üî¢ –°–∫–æ–ª—å–∫–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∑–∞—Ä–æ–ª–∏—Ç—å?", 1, 10, 3, key="count_animal")
        if "animal_history" not in st.session_state:
            st.session_state["animal_history"] = []
            st.session_state["animal_index"] = -1
        col_roll, col_back, col_forward = st.columns([2, 0.5, 0.5])
        with col_roll:
            if st.button("üé≤ –ó–∞—Ä–æ–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–ñ–∏–≤–æ—Ç–Ω—ã–µ)", key="roll_animal"):
                if filtered_df.empty:
                    st.warning("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
                else:
                    roll = roll_ingredients(filtered_df, num)
                    st.session_state["animal_history"].append(roll)
                    st.session_state["animal_index"] = len(st.session_state["animal_history"]) - 1
        with col_back:
            if st.button("‚óÄ –ù–∞–∑–∞–¥", key="animal_prev"):
                if st.session_state["animal_index"] > 0:
                    st.session_state["animal_index"] -= 1
        with col_forward:
            if st.button("–í–ø–µ—Ä—ë–¥ ‚ñ∂", key="animal_next"):
                if st.session_state["animal_index"] < len(st.session_state["animal_history"]) - 1:
                    st.session_state["animal_index"] += 1
        st.markdown("---")
        if st.session_state["animal_index"] >= 0:
            for item in st.session_state["animal_history"][st.session_state["animal_index"]]:
                show_ingredient(item, is_plant=False)

# ==========================================
# üß™ –°–õ–£–ß–ê–ô–ù–û–ï –ó–ï–õ–¨–ï
# ==========================================
elif page == "üß™ –°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ":
    st.header("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ")

    if "potion_history" not in st.session_state:
        st.session_state["potion_history"] = []
        st.session_state["potion_index"] = -1
        st.session_state["used_combinations"] = set()

    selected_rarities = st.multiselect(
        "üìä –ñ–µ–ª–∞–µ–º—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏", 
        ["–û–±—ã—á–Ω—ã–π", "–ù–µ–æ–±—ã—á–Ω—ã–π", "–†–µ–¥–∫–∏–π", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"],
        default=["–û–±—ã—á–Ω—ã–π", "–ù–µ–æ–±—ã—á–Ω—ã–π", "–†–µ–¥–∫–∏–π", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"],
        key="rarity_potion"
    )

    def genitive_form(name):
        name = name.strip()
        if name.endswith("–∞"):
            return name[:-1] + "—ã"
        elif name.endswith("—è"):
            return name[:-1] + "–∏"
        return name

    def extract_core(name):
        return name.split()[0]

    def generate_fantasy_name(plant, animal):
        templates = [
            "–≠–ª–∏–∫—Å–∏—Ä {plant_gen}",
            "–ù–∞—Å—Ç–æ–π {animal_gen}",
            "–ó–µ–ª—å–µ {animal_core} –∏ {plant_core}",
            "–§–ª–∞–∫–æ–Ω {animal_core}",
            "–≠—Å—Å–µ–Ω—Ü–∏—è {plant_core}",
            "–û—Ç–≤–∞—Ä {animal_core} –∏ {plant_core}",
            "–ó–µ–ª—å–µ –∏–∑ {plant_gen} –∏ {animal_gen}"
        ]
        plant_gen = genitive_form(plant)
        animal_gen = genitive_form(animal)
        plant_core = extract_core(plant)
        animal_core = extract_core(animal)
        return random.choice(templates).format(
            plant_gen=plant_gen,
            animal_gen=animal_gen,
            plant_core=plant_core,
            animal_core=animal_core
        )

    col_roll, col_back, col_forward = st.columns([2, 0.5, 0.5])
    with col_roll:
        if st.button("üé≤ –°–æ–∑–¥–∞—Ç—å –∑–µ–ª—å–µ"):
            attempts = 0
            while attempts < 100:
                plant = df_plants[df_plants["–†–µ–¥–∫–æ—Å—Ç—å"].isin(selected_rarities)].sample(1).iloc[0]
                animal = df_animals[df_animals["–†–µ–¥–∫–æ—Å—Ç—å"].isin(selected_rarities)].sample(1).iloc[0]
                combo_key = f"{plant['–ù–∞–∑–≤–∞–Ω–∏–µ']}|{animal['–ù–∞–∑–≤–∞–Ω–∏–µ']}"
                if combo_key not in st.session_state["used_combinations"]:
                    st.session_state["used_combinations"].add(combo_key)
                    break
                attempts += 1
            else:
                st.warning("–í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
                st.stop()
            st.session_state["potion_history"].append((plant, animal))
            st.session_state["potion_index"] = len(st.session_state["potion_history"]) - 1

    with col_back:
        if st.button("‚óÄ", key="potion_prev"):
            if st.session_state["potion_index"] > 0:
                st.session_state["potion_index"] -= 1
    with col_forward:
        if st.button("‚ñ∂", key="potion_next"):
            if st.session_state["potion_index"] < len(st.session_state["potion_history"]) - 1:
                st.session_state["potion_index"] += 1

    st.markdown("---")

    if st.session_state["potion_index"] >= 0:
        plant, animal = st.session_state["potion_history"][st.session_state["potion_index"]]

        rarity = random.choice([plant["–†–µ–¥–∫–æ—Å—Ç—å"], animal["–†–µ–¥–∫–æ—Å—Ç—å"]])
        potion_name = generate_fantasy_name(plant['–ù–∞–∑–≤–∞–Ω–∏–µ'], animal['–ù–∞–∑–≤–∞–Ω–∏–µ'])

        effect = f"{plant['–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç']} + {animal['–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏']}"
        side_effects = f"{plant['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}, {animal['–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã']}"
        dc_text = f"DC: {max(plant['DC —Å–±–æ—Ä–∞'], animal['DC —Å–±–æ—Ä–∞'])}"
        composition = f"üåø {plant['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {plant['–û–ø–∏—Å–∞–Ω–∏–µ']}\nü¶¥ {animal['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {animal.get('–û–ø–∏—Å–∞–Ω–∏–µ', animal.get('–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç', ''))}"

        color_map = {
            "–û–±—ã—á–Ω—ã–π": "#e4e5e3",
            "–ù–µ–æ–±—ã—á–Ω—ã–π": "#b3e9b8",
            "–†–µ–¥–∫–∏–π": "#f0be7f",
            "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "#f7ed2d"
        }
        color = color_map.get(rarity, "#cccccc")

        st.markdown(f"""
        <div style='
            background-color: #1e1e1e;
            padding: 20px;
            border-radius: 10px;
            border-left: 6px solid {color};
            margin-top: 20px;
            box-shadow: 2px 2px 8px rgba(0,0,0,0.4);
        '>
            <div style='display: flex; justify-content: space-between; align-items: center;'>
                <h3 style='color: {color}; margin-bottom: 10px'>üß™ {potion_name} ({rarity})</h3>
                <div style='color: {color}; font-weight: bold; font-size: 20px'>{dc_text}</div>
            </div>
            <p><strong>–≠—Ñ—Ñ–µ–∫—Ç:</strong> {effect}</p>
            <p><strong>–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:</strong> {side_effects}</p>
            <p><strong>–°–æ—Å—Ç–∞–≤:</strong><br>{composition.replace(chr(10), "<br>")}</p>
        </div>
        """, unsafe_allow_html=True)
